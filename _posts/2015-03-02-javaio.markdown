---
layout: post
title:  "学习Java IO"
date:   2015-03-02
categories: jekyll update
---

java.io是一个主要的package，但是并不是所有的IO classes都在这里面。其中只包含file，network stream 还有memory的读写。更多复杂的网络读写，还需要使用别的package。比如网络读写，需要使用socket的内容先打开连接，然后使用IO package进行读写。

Java IO分为两组，Steam和Reader/Writer。一个是字节流，一个是字符流。这两种方法可以相互转换，比如，InputStreamReader，OutputStreamWriter。

返回来，InputStream/OutputStream和Reader/Writer都是基本类型，叫节点型，另外在基础上进行封装，可以形成处理型，比如BuffferedInputStream，BufferedWriter。这样不仅继承了原来的方法，还有更多的方法，比如readLine。

其实处理型还可以出现更加复杂的情况。比如一个输入原始节点型是InputStream，我们怎么得到一个非常好用的Reader呢。我们可以这样：

InputStream -> InputStreamReader -> BufferedReader

Java还构建了更方便的IO：

1. 当我们想要按一些特定的类型进行读写的时候，便需要使用DataInputStream等。

2. 上面第一条的DataInputStream只是对基本类型的，比如Double, Integer等等，如果是复杂一点的数据类型，可以是ByteArrayInputstream，是从一个Byte Array中读内容；ByteArrayOutputStream，是讲一些内容写入到一个Byte Array中（内存会自动分配一些内容，或者程序自己指定大小）。（注意Array肯定是先入先出的）。而这里可以复杂一点，可以将这个Byte Array转化为一个复杂好用的Array：

ByteArrayOutputStream -> DataOutputStream

这样每次读出的内容可以是一个任意的类型，而不是Byte这么底层的类型。

3. 还有一类特殊的IO时Print，可以在Stream的外层构建PrintStream。这个Print IO的优点是没有异常的抛出，且自带flush，不需要手动进行。比如修改System.out的位置：

FileOutputStream -> PrintStream => System.setOut(PrintStream)

4. Object IO: 比如画图软件，保存，一些图形直接存在硬盘上了，使用Object IO。比如有一个class T。那么我们可以将一个T t写入文件：FileOutputStream -> ObjectOutputStream。然后读出就是相反的过程。这个过程涉及writeObject，readObject这些方法。