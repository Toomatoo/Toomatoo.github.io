<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tomato sliu</title>
    <atom:link href="https://toomatoo.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <link>https://toomatoo.github.io/</link>
    <description>personal posts</description>
    <pubDate>Sun, 10 Apr 2016 13:46:26 -0700</pubDate>
    
      <item>
        <title>16</title>
        <link>https://toomatoo.github.io/jekyll/update/2016/03/22/1.html</link>
        <guid isPermaLink="true">https://toomatoo.github.io/jekyll/update/2016/03/22/1.html</guid>
        <description>&lt;h1 id=&quot;spring-tutorial-16-beanfactorypostprocessor&quot;&gt;Spring Tutorial 16: BeanFactoryPostProcessor&lt;/h1&gt;

&lt;p&gt;For this time, I learnt a mechanism to write a class which takes actions when initializing a bean
factory.&lt;/p&gt;

&lt;h2 id=&quot;beanfactorypostprocessor&quot;&gt;BeanFactoryPostProcessor&lt;/h2&gt;

&lt;p&gt;First, I write a new class of my BeanFactoryPostProcessor which implements &lt;code class=&quot;highlighter-rouge&quot;&gt;BeanFactoryPostProcessor&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;java
public class MyBeanFactoryPP implements BeanFactoryPostProcessor {
    @Override
    public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {
        System.out.println(&quot;My Bean Factory Postprocessor called.&quot;);
    }
}
&lt;/code&gt;
Then like a BeanPostProcessor, I just add a bean tag into the beans in the configure xml file.
```xml&lt;/p&gt;
&lt;bean class=&quot;me.tomato.MyBeanFactoryPP&quot; /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;And spring will automatically know it is a BeanPostProcessor because it implements `BeanPostProcessor`.

The function for BeanPostProcessor is to take some actions when initializing a bean factory.

One thing is to config the configure file before creating beans.

## PropertyPlaceholderConfigurer

As is said above, the configure file can also be initialized. In our example, there are some beans
for points. The coordinates value are fixed in the previous definition. However, we can use a
Bean Factory Processor to configure the beans.

Here I use PropertyPlaceholderConfigurer which can take in a property configure file and put the
values into beans.

First write a new property file to store some value. For example, in a new file `pointsproperty.properties`,
```text
point.valueX = 0
point.valueY = 0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;And prepare it for later use.&lt;/p&gt;

&lt;p&gt;Second we rewrite a point bean
```xml&lt;/p&gt;
&lt;bean id=&quot;point1&quot; class=&quot;me.tomato.Point&quot;&gt;
      &lt;property name=&quot;x&quot; value=&quot;${point.valueX}&quot; /&gt;
      &lt;property name=&quot;y&quot; value=&quot;${point.valueY}&quot; /&gt;
&lt;/bean&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;As is shown above, we can use the format `${valueName}` to refer some value in a properties configure
file.

Third, write a bean in `spring.xml` to indicate that there is a BeanPostProcessor for the factory.
```xml
&amp;lt;bean class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&amp;gt;
       &amp;lt;property name=&quot;locations&quot; value=&quot;pointsproperty.properties&quot;/&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;As is shown above, &lt;code class=&quot;highlighter-rouge&quot;&gt;PropertyPlaceholderConfigurer&lt;/code&gt; can link a properties file with this factory, and
makes beans have the ability to use values of properties in the file. Add a property for it, and
set the value the file path to the properties file.&lt;/p&gt;

&lt;p&gt;Then all the stuff is done, and the point1 bean can create a Point object with some values written
in the properties file.&lt;/p&gt;
</description>
        <pubDate>Tue, 22 Mar 2016 00:00:00 -0700</pubDate>
      </item>
    
      <item>
        <title>Try Jekyll</title>
        <link>https://toomatoo.github.io/jekyll/update/2015/02/22/try-jekyll.html</link>
        <guid isPermaLink="true">https://toomatoo.github.io/jekyll/update/2015/02/22/try-jekyll.html</guid>
        <description>&lt;h2 id=&quot;jekyll&quot;&gt;使用Jekyll&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;下载安装Jekyll&lt;/p&gt;

    &lt;p&gt;因为需要使用gem安装Jekyll，但是出现一些不安全提示：
 /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/universal-darwin14/rbconfig.rb:213: warning: Insecure world writable dir /usr in PATH, mode 040777
 之后通过硬盘修复得到了解决：
 &lt;img src=&quot;http://i.stack.imgur.com/OhmNJ.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用Jekyll&lt;/p&gt;

    &lt;p&gt;基础操作是：添加post到_post文件夹中，我使用的文件格式是Markdown，所以命名格式是：&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;YEAR-MOUTH-DAY-DOCNAME.markdown&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Post规范&lt;/p&gt;

    &lt;p&gt;1) 用—前后包住配置文件，之间写一些配置选项
     layout: 文件形式，一般是post
     title: 显示的title
     data: 显示的时间
     categories: 文件路径 &lt;code class=&quot;highlighter-rouge&quot;&gt;这里我还没有搞懂这个路径和url是怎么对应的&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;jekyll-1&quot;&gt;配置Jekyll&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;修改了config文件，但是却没有反应&lt;/p&gt;

    &lt;p&gt;重新开了一个jekyll blog，修改配置文件，文件便可以使用。并且持续修改配置文件，显示有效。
 &lt;code class=&quot;highlighter-rouge&quot;&gt;不知道为什么之前的不可以&lt;/code&gt;
 （之后我由于添加了post，又出现了无法正常反映改变的情况，即使重新build。当我手动修了index之后，重新build，便可以显示了。同时&lt;code class=&quot;highlighter-rouge&quot;&gt;根目录中的index.html是一个template，可以通过修改，影响index，同时它可以是markdown，textile格式，之后再进行学习&lt;/code&gt;）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;搭建到github pages&lt;/p&gt;

    &lt;p&gt;http://theloverz.me/tutorials/2013/08/24/use-github-and-jekyll-to-establish-blog/&lt;/p&gt;

    &lt;p&gt;我现在所用的方法仍然是github repository的setting中直接启动autopage，然后修改其内容。
 而这里的效果是需要我本地build，然后push。应该并不是github和Jekyll&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;jekyll-2&quot;&gt;定制Jekyll&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;myblog/index.html, myblog/_includes, myblog/_lay
outs都是template。网站据此生成调用它们（footer，header）的完整页面。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section&quot;&gt;问题&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;修改domain的过程中出现了错误，现在github.io页面直接指向toomatoo.me&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 22 Feb 2015 00:00:00 -0800</pubDate>
      </item>
    
  </channel>
</rss>
